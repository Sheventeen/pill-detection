import type { FunctionCall } from '../../src/llm/chat_context.ts';
import type { AgentSession } from '../../src/voice/agent_session.ts';
import type { SpeechHandle } from '../../src/voice/speech_handle.ts';
export type UnknownUserData = unknown;
export declare class RunContext<UserData = UnknownUserData> {
    readonly session: AgentSession<UserData>;
    readonly speechHandle: SpeechHandle;
    readonly functionCall: FunctionCall;
    private readonly initialStepIdx;
    constructor(session: AgentSession<UserData>, speechHandle: SpeechHandle, functionCall: FunctionCall);
    get userData(): UserData;
    /**
     * Waits for the speech playout corresponding to this function call step.
     *
     * Unlike {@link SpeechHandle.waitForPlayout}, which waits for the full
     * assistant turn to complete (including all function tools),
     * this method only waits for the assistant's spoken response prior to running
     * this tool to finish playing.
     */
    waitForPlayout(): Promise<void>;
}
//# sourceMappingURL=run_context.d.ts.map