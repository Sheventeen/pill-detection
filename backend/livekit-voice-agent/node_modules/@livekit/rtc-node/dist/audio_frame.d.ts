import { OwnedAudioFrameBuffer, AudioFrameBufferInfo } from '../src/proto/audio_frame_pb.ts';
import '@bufbuild/protobuf';
import '../src/proto/track_pb.ts';
import '../src/proto/stats_pb.ts';
import '../src/proto/e2ee_pb.ts';
import '../src/proto/handle_pb.ts';

declare class AudioFrame {
    data: Int16Array;
    sampleRate: number;
    channels: number;
    samplesPerChannel: number;
    constructor(data: Int16Array, sampleRate: number, channels: number, samplesPerChannel: number);
    static create(sampleRate: number, channels: number, samplesPerChannel: number): AudioFrame;
    /** @internal */
    static fromOwnedInfo(owned: OwnedAudioFrameBuffer): AudioFrame;
    /** @internal */
    protoInfo(): AudioFrameBufferInfo;
}
/**
 * Combines one or more `rtc.AudioFrame` objects into a single `rtc.AudioFrame`.
 *
 * This function concatenates the audio data from multiple frames, ensuring that all frames have
 * the same sample rate and number of channels. It efficiently merges the data by preallocating the
 * necessary memory and copying the frame data without unnecessary reallocations.
 *
 * @param buffer - a single AudioFrame or list thereof
 */
declare const combineAudioFrames: (buffer: AudioFrame | AudioFrame[]) => AudioFrame;

export { AudioFrame, combineAudioFrames };
