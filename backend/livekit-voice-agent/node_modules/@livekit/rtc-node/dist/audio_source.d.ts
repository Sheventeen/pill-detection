import { AudioFrame } from '../src/audio_frame.ts';
import { FfiHandle } from '../src/napi/native.js';
import { AudioSourceInfo } from '../src/proto/audio_frame_pb.ts';
import '@bufbuild/protobuf';
import '../src/proto/track_pb.ts';
import '../src/proto/stats_pb.ts';
import '../src/proto/e2ee_pb.ts';
import '../src/proto/handle_pb.ts';

declare class AudioSource {
    /** @internal */
    info: AudioSourceInfo;
    /** @internal */
    ffiHandle: FfiHandle;
    /** @internal */
    lastCapture: number;
    /** @internal */
    currentQueueSize: number;
    /** @internal */
    release: () => void;
    promise: Promise<void>;
    /** @internal */
    timeout?: ReturnType<typeof setTimeout>;
    /** @internal */
    closed: boolean;
    sampleRate: number;
    numChannels: number;
    queueSize: number;
    constructor(sampleRate: number, numChannels: number, queueSize?: number);
    get queuedDuration(): number;
    clearQueue(): void;
    /** @internal */
    newPromise(): Promise<void>;
    waitForPlayout(): Promise<void>;
    captureFrame(frame: AudioFrame): Promise<void>;
    close(): Promise<void>;
}

export { AudioSource };
