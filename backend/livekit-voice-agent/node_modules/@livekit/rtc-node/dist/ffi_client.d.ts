import { PartialMessage } from '@bufbuild/protobuf';
import { TypedEventEmitter } from '@livekit/typed-emitter';
export { FfiHandle, livekitDispose as dispose } from '../src/napi/native.js';
import { FfiEvent, FfiRequest } from '../src/proto/ffi_pb.ts';
export { FfiResponse } from '../src/proto/ffi_pb.ts';
import '../src/proto/room_pb.ts';
import '../src/proto/participant_pb.ts';
import '../src/proto/handle_pb.ts';
import '../src/proto/track_pb.ts';
import '../src/proto/stats_pb.ts';
import '../src/proto/e2ee_pb.ts';
import '../src/proto/video_frame_pb.ts';
import '../src/proto/data_stream_pb.ts';
import '../src/proto/audio_frame_pb.ts';
import '../src/proto/rpc_pb.ts';
import '../src/proto/track_publication_pb.ts';

type FfiClientCallbacks = {
    ffi_event: (event: FfiEvent) => void;
};
declare enum FfiClientEvent {
    FfiEvent = "ffi_event"
}
declare global {
    var _ffiClientInstance: FfiClient | undefined;
}
declare const FfiClient_base: new () => TypedEventEmitter<FfiClientCallbacks>;
declare class FfiClient extends FfiClient_base {
    /** @internal */
    static get instance(): FfiClient;
    constructor();
    request<T>(req: PartialMessage<FfiRequest>): T;
    copyBuffer(ptr: bigint, len: number): Uint8Array;
    retrievePtr(data: Uint8Array): bigint;
    waitFor<T>(predicate: (ev: FfiEvent) => boolean): Promise<T>;
}

export { FfiClient, type FfiClientCallbacks, FfiClientEvent, FfiEvent, FfiRequest };
